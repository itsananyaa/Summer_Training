class Solution {
public:
    int longestValidParentheses(string s) {
        int max_length = 0;
        stack<int> stk;
        stk.push(-1); // Push index -1 to indicate the start of the string
        
        for (int i = 0; i < s.length(); ++i) {
            if (s[i] == '(') {
                stk.push(i); // Push the index of '(' to the stack
            } else { // s[i] == ')'
                stk.pop(); // Pop the top element of the stack
                
                if (!stk.empty()) {
                    max_length = max(max_length, i - stk.top()); // Update max_length
                } else {
                    stk.push(i); // Push the index of ')' to the stack to mark the end of the invalid substring
                }
            }
        }
        
        return max_length;
    }
};

WITHOUT USING STACK:
class Solution {
public:
    int longestValidParentheses(string s) {
        int maxl=0;
        int left=0;
        int right=0;
        for(int i=0; i<s.length(); i++) {
            if (s[i]=='(') 
                left++; 
            else 
                right++; 
            if (left==right)
                maxl=max(maxl, right+left);
            else if(left<right)
                left=right=0;
        }
        left = right = 0;
        int max2=0;
        for(int i=s.size()-1; i>=0; i--) {
            if (s[i]=='(') 
                left++; 
            else 
                right++; 
            if (left==right)
                max2=max(max2, right+left);
            else if(right<left)
                left=right=0;
        }
        //cout<<maxl<<" "<<max2;
        return max(maxl, max2);
    }
};
